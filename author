#!/usr/bin/python3

from bs4 import BeautifulSoup
import os
import sys
import subprocess


# Whether output is verbose
VERBOSE = False


# Output an error message and exit if necessary
def error(who, msg, fatal=False, exit_code=-1, pre='error'):

    print('%s: %s: %s' % (who, pre, msg), file=sys.stderr)
    if fatal: exit(exit_code)


# Print verbose output
def verb(who, msg):

    if VERBOSE: print('%s: %s' % (who, msg))


# Class for analyzing an APK file
class ApkAnalyzer:

    # TODO check if apk_file exists
    def __init__(self, apk_file):

        self.file = apk_file            # APK file path
        self.dir = apk_file + '.dec'    # extracted APK directory
        self.xml_strings = []           # list of XML resource files
        self.bin_files = []             # list of binary files

        verb('__init__', 'Created ApkAnalyzer for %s' % (apk_file))


    # Extract string data from res/values/strings.xml
    def get_xml_strings(self):

        strings_xml_path = os.path.join(self.dir, 'res/values/strings.xml')
        with open(strings_xml_path) as xml_file:
            parser = BeautifulSoup(xml_file, features='lxml-xml')

        '''
        print(parser.resources.descendants)
        for child in parser.resources.descendants:
            print(child)
        '''
    

    # Extract/decrypt APK file using `apktool`
    def extract(self):

        # This is the command that extracts the APK file
        # Flags:
        #   d   This instructs apktool to decode an APK file
        #  -s   This prevents apktool from generating source code from classes.dex
        #  -o   This precedes the desired name of the output directory
        cmd = 'apktool d -s -o %s %s' % (self.dir, self.file)

        verb('extract', 'extracting %s to %s ...' % (self.file, self.dir))

        # Fork command
        proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)

        # Wait for command completion
        proc.wait()

        # If the process exited with errors, print its output
        if proc.returncode != 0:
            error('extract', 'encountered errors for %s' % (self.file))
            error('extract', '\n%s' % (proc.stderr.read().decode()) )
        else:
            verb('extract', 'extraction completed successfuly')


    # Run entire analysis routine
    def run(self):

        self.extract()
        self.get_xml_strings()


if __name__ == '__main__':

    # TODO parse verbosity through argv
    VERBOSE = True

    if len(sys.argv) < 2:
        error(sys.argv[0], '%s <apkFileName>' % (sys.argv[0]), True, pre='usage')

    analyzer = ApkAnalyzer(sys.argv[1])
    analyzer.run()

